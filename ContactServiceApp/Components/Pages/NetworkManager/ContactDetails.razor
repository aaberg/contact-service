@page "/network/{contactId}"
@using ContactServiceApp.Contacts
@using ContactServiceApp.Identity
@using ContactServiceGrainInterfaces.Contact
@using ContactServiceApp.Components.Contact
@inject ContactService ContactService
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>ContactDetails</h3>

<p>@ContactId</p>

<MudPaper Class="pa-4 mb-5">
    <MudText Typo="Typo.h2">@Contact?.Name</MudText>
    <div class="d-inline-flex">
        <div class="pr-6">
            <MudText Typo="Typo.body2">Primary email</MudText>
            <MudText Typo="Typo.body1">@(Contact?.PrimaryEmail?.Email ?? "-")</MudText>
        </div>
        <div class="pl-6">
            <MudText Typo="Typo.body2">Primary phone</MudText>
            <MudText Typo="Typo.body1">@(Contact?.PrimaryPhone?.PhoneNumber ?? "-")</MudText>
        </div>
    </div>
</MudPaper>
<MudPaper Class="pa-4">
    <MudText Typo="Typo.subtitle1">Contact details</MudText>
    <div class="d-flex mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-4"></MudIcon>
        <div>
            @foreach (var email in Contact?.Emails ?? Array.Empty<EmailAddress>())
            {
                <MudText Typo="Typo.body1">@email.Email</MudText>
            }

            <MudLink Href="#">Add email</MudLink>

        </div>
    </div>
    
    <PhoneNumbers Contact="Contact" GetUserFunc="User" OnPhoneChanged="LoadContact"></PhoneNumbers>

    
</MudPaper>

@code {
    [Parameter] public string? ContactId { get; set; }

    private Contact? Contact { get; set; }

    protected override async Task OnInitializedAsync() => await LoadContact();

    private async Task LoadContact()
    {
        var user = await User();
        if (ContactId == null) throw new Exception("ContactId is required.");

        Contact = await ContactService.GetContact(user.Id, ContactId);
    }

    private async Task<ApplicationUser> User()
    {
        return (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.ToApplicationUser();
    }

}